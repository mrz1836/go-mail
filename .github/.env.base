# ================================================================================================
#  üè∞ GoFortress Base Configuration (.env.base)
# ================================================================================================
#
#  Purpose: Base configuration defaults for GoFortress CI/CD workflows and tools.
#  This file contains the standard configuration that works for most Go projects.
#
#  Override Strategy:
#  - This file (.env.base) contains DEFAULT values for all configuration
#  - Project-specific overrides go in .env.custom (optional)
#  - .env.custom values take precedence over .env.base values
#
# Tools:
#  - GoFortress
#  - go-coverage
#  - go-pre-commit
#  - GitHub Workflows
#
#  Maintainer: @mrz1836
#
# ================================================================================================

# ================================================================================================
# üéØ GO VERSION CONFIGURATION
# ================================================================================================

# Primary Go version for builds and primary test runner
# This version is used for coverage, benchmarks, and release builds
GO_PRIMARY_VERSION=1.24.x

# Secondary Go version for compatibility testing
# Set to same as primary to test with single version only
GO_SECONDARY_VERSION=1.24.x

# ================================================================================================
# üñ•Ô∏è RUNNER CONFIGURATION
# ================================================================================================

# Primary runner OS for most CI jobs
# Options: ubuntu-24.04, ubuntu-22.04, macos-15
# Note: macOS runners are 10x more expensive than Linux
PRIMARY_RUNNER=ubuntu-24.04

# Secondary runner for cross-platform compatibility testing
# Set identical to PRIMARY_RUNNER for single-OS testing
SECONDARY_RUNNER=ubuntu-24.04

# ================================================================================================
# üîë GITHUB TOKEN CONFIGURATION
# ================================================================================================

# Preferred GitHub token for API operations
# GH_PAT_TOKEN: Personal Access Token (5000 requests/hour) - requires secret
# GITHUB_TOKEN: Default workflow token (1000 requests/hour) - always available
PREFERRED_GITHUB_TOKEN=GH_PAT_TOKEN

# ================================================================================================
# ‚ú® FEATURE FLAGS
# ================================================================================================

# Core Features
ENABLE_BENCHMARKS=true                 # Run benchmark tests
ENABLE_CODE_COVERAGE=true              # Generate coverage reports via go-coverage
ENABLE_FUZZ_TESTING=true               # Run fuzz tests (Go 1.18+)
ENABLE_RACE_DETECTION=true             # Enable Go race detector
ENABLE_STATIC_ANALYSIS=true            # Run go vet analysis
ENABLE_VERBOSE_TEST_OUTPUT=false       # Verbose test output (can slow CI)

# Code Quality Tools
ENABLE_GO_LINT=true                    # Run MAGE-X linter (golangci-lint)
ENABLE_GO_PRE_COMMIT=true              # Run go-pre-commit checks
ENABLE_YAML_LINT=true                  # Validate YAML with yamlfmt (Go-based)

# Security Scanning
ENABLE_SECURITY_SCAN_GITLEAKS=true     # Scan for leaked secrets
ENABLE_SECURITY_SCAN_GOVULNCHECK=true  # Go vulnerability scanning
ENABLE_SECURITY_SCAN_NANCY=true        # Dependency vulnerability checks

# Documentation & Publishing
ENABLE_GODOCS_PUBLISHING=true          # Publish to pkg.go.dev on tag/releases

# ================================================================================================
# ‚öôÔ∏è TEST CONFIGURATION
# ================================================================================================

# Test Output Configuration
TEST_OUTPUT_MODE=SMART                 # Options: FULL, FAILURES_ONLY, SMART
TEST_OUTPUT_SMART_THRESHOLD=500        # Switch to failure-only mode above this test count
TEST_FAILURE_DETAIL_COUNT=50           # How many failures to show with full details
TEST_FAILURE_ANNOTATION_COUNT=10       # GitHub annotations (hard limit is 50)
TEST_OUTPUT_COMPRESS_ARTIFACTS=true    # Gzip large outputs
TEST_OUTPUT_ARTIFACT_RETENTION_DAYS=7  # Keep test artifacts for debugging

# Test Execution Timeouts
TEST_TIMEOUT=30m                       # Go test timeout for standard tests
TEST_TIMEOUT_RACE_COVER=30m            # Timeout for tests with race+coverage (most intensive)
TEST_TIMEOUT_UNIT=20m                  # Timeout for unit tests only
TEST_TIMEOUT_FUZZ=5m                   # Timeout for fuzz tests

# ================================================================================================
# üèÉ BENCHMARK CONFIGURATION
# ================================================================================================

# Benchmark execution timeout in minutes
BENCHMARK_TIMEOUT=20    # Minutes

# Benchmark mode
BENCHMARK_MODE=quick    # Options: quick, full, normal

# ================================================================================================
# üì¶ ARTIFACT DOWNLOAD CONFIGURATION
# ================================================================================================

# Artifact Download Resilience Settings
ARTIFACT_DOWNLOAD_RETRIES=3                 # Number of retry attempts for failed downloads
ARTIFACT_DOWNLOAD_RETRY_DELAY=10            # Initial retry delay in seconds (uses exponential backoff)
ARTIFACT_DOWNLOAD_TIMEOUT=300               # Download timeout in seconds (5 minutes)
ARTIFACT_DOWNLOAD_CONTINUE_ON_ERROR=false   # Continue workflow execution even if artifact download fails

# ================================================================================================
# üìä COVERAGE SYSTEM CONFIGURATION (go-coverage)
# ================================================================================================

# Coverage Provider Selection
# Options: internal (go-coverage with GitHub Pages), codecov (external service)
# If you use codecov, set CODECOV_TOKEN in your repository secrets
GO_COVERAGE_PROVIDER=internal

# Codecov Configuration (only used when provider=codecov)
CODECOV_TOKEN_REQUIRED=false

# Go Coverage Tool Version
GO_COVERAGE_VERSION=v1.1.11           # https://github.com/mrz1836/go-coverage
GO_COVERAGE_USE_LOCAL=false           # Use local version for development

# Core Coverage Settings
GO_COVERAGE_INPUT_FILE=coverage.txt
GO_COVERAGE_OUTPUT_DIR=.
GO_COVERAGE_THRESHOLD=65.0
GO_COVERAGE_ALLOW_LABEL_OVERRIDE=true

# Coverage Exclusions
GO_COVERAGE_EXCLUDE_PATHS=test/,vendor/,testdata/
GO_COVERAGE_EXCLUDE_FILES=*_test.go,*.pb.go
GO_COVERAGE_EXCLUDE_TESTS=true
GO_COVERAGE_EXCLUDE_GENERATED=true

# GitHub Integration
GO_COVERAGE_POST_COMMENTS=true
GO_COVERAGE_CREATE_STATUSES=true
GO_COVERAGE_SKIP_URL_CHECKS=false
GO_COVERAGE_FAIL_ON_URL_ERRORS=true
GO_COVERAGE_URL_CHECK_TIMEOUT=300

# Badge Configuration
GO_COVERAGE_BADGE_STYLE=flat
GO_COVERAGE_BADGE_LABEL=coverage
GO_COVERAGE_BADGE_LOGO=2fas
GO_COVERAGE_BADGE_LOGO_COLOR=white
GO_COVERAGE_BADGE_OUTPUT=coverage.svg
GO_COVERAGE_BADGE_TREND=false

# Report Configuration
GO_COVERAGE_REPORT_OUTPUT=coverage.html
GO_COVERAGE_REPORT_TITLE="Coverage Report"
GO_COVERAGE_REPORT_THEME=github-dark
GO_COVERAGE_REPORT_PACKAGES=true
GO_COVERAGE_REPORT_FILES=true
GO_COVERAGE_REPORT_MISSING=true

# History Tracking
GO_COVERAGE_HISTORY_ENABLED=true
GO_COVERAGE_HISTORY_PATH=history
GO_COVERAGE_HISTORY_RETENTION=90
GO_COVERAGE_HISTORY_MAX_ENTRIES=1000
GO_COVERAGE_HISTORY_CLEANUP=true
GO_COVERAGE_HISTORY_METRICS=true

# Storage Configuration
GO_COVERAGE_BASE_DIR=.
GO_COVERAGE_AUTO_CREATE_DIRS=true
GO_COVERAGE_FILE_MODE=644
GO_COVERAGE_DIR_MODE=755

# Logging Configuration
GO_COVERAGE_LOG_LEVEL=INFO
GO_COVERAGE_LOG_FORMAT=text
GO_COVERAGE_LOG_ENABLED=true

# ================================================================================================
# üóÑÔ∏è REDIS SERVICE CONFIGURATION
# ================================================================================================

# Redis Service Control
ENABLE_REDIS_SERVICE=false             # Enable Redis service container for tests/benchmarks
REDIS_SERVICE_MODE=never               # Options: auto, always, never (auto = enabled if redis tests detected)

# Redis Version Configuration
REDIS_VERSION=7-alpine                 # Redis Docker image version (7-alpine, 6-alpine, latest)

# Redis Connection Configuration
REDIS_HOST=localhost                   # Redis host (localhost for GitHub Actions service containers)
REDIS_PORT=6379                        # Redis port (standard: 6379)

# Redis Health Check Configuration
REDIS_TRUST_SERVICE_HEALTH=true        # Trust GitHub Actions service container health checks (skip redis-cli verification)
REDIS_HEALTH_CHECK_RETRIES=10          # Number of health check retries
REDIS_HEALTH_CHECK_INTERVAL=10         # Health check interval in seconds
REDIS_HEALTH_CHECK_TIMEOUT=5           # Health check timeout in seconds

# Redis Cache Configuration
REDIS_CACHE_FORCE_PULL=false           # Force pull Redis images even when cached (true/false)

# ================================================================================================
# üîß TOOL VERSIONS
# ================================================================================================

# Security Tools
GITLEAKS_VERSION=8.28.0                # https://github.com/gitleaks/gitleaks/releases
GOVULNCHECK_VERSION=v1.1.4             # https://pkg.go.dev/golang.org/x/vuln
NANCY_VERSION=v1.0.51                  # https://github.com/sonatype-nexus-community/nancy/releases

# ================================================================================================
# ü™Ñ MAGE-X CONFIGURATION
# ================================================================================================

MAGE_X_VERSION=v1.6.1                                         # https://github.com/mrz1836/mage-x/releases
MAGE_X_AUTO_DISCOVER_BUILD_TAGS=true                          # Enable auto-discovery of build tags
MAGE_X_AUTO_DISCOVER_BUILD_TAGS_EXCLUDE=race,custom           # Comma-separated list of tags to exclude
MAGE_X_FORMAT_EXCLUDE_PATHS=vendor,node_modules,.git,.idea    # Format exclusion paths (comma-separated directories to exclude from formatting)
MAGE_X_GITLEAKS_VERSION=8.28.0                                # https://github.com/gitleaks/gitleaks/releases
MAGE_X_GOFUMPT_VERSION=v0.8.0                                 # https://github.com/mvdan/gofumpt/releases
MAGE_X_GOLANGCI_LINT_VERSION=v2.4.0                           # https://github.com/golangci/golangci-lint/releases
MAGE_X_GORELEASER_VERSION=v2.12.0                             # https://github.com/goreleaser/goreleaser/releases
MAGE_X_GOVULNCHECK_VERSION=v1.1.4                             # https://pkg.go.dev/golang.org/x/vuln
MAGE_X_GO_SECONDARY_VERSION=1.24.x                            # Secondary Go version for MAGE-X (also our secondary)
MAGE_X_GO_VERSION=1.24.x                                      # Primary Go version for MAGE-X (also our primary)
MAGE_X_MOCKGEN_VERSION=v0.6.0                                 # https://github.com/uber-go/mock/releases
MAGE_X_NANCY_VERSION=v1.0.51                                  # https://github.com/sonatype-nexus-community/nancy/releases
MAGE_X_STATICCHECK_VERSION=2025.1.1                           # https://github.com/dominikh/go-tools/releases
MAGE_X_SWAG_VERSION=v1.16.6                                   # https://github.com/swaggo/swag/releases
MAGE_X_YAMLFMT_VERSION=v0.17.2                                # https://github.com/google/yamlfmt/releases

# Runtime variables (set by setup-goreleaser action):
# MAGE_X_GORELEASER_PATH - Path to installed goreleaser binary
# MAGE_X_GORELEASER_INSTALLED - Set to 'true' when goreleaser is available
# MAGE_X_GORELEASER_CACHED_VERSION - Version of installed goreleaser

# Optional Overrides (uncomment to override defaults)
# MAGE_X_BINARY_NAME=magex
# MAGE_X_BUILD_TAGS=mage
# MAGE_X_DOWNLOAD_BACKOFF=2.0
# MAGE_X_DOWNLOAD_INITIAL_DELAY=300
# MAGE_X_DOWNLOAD_MAX_DELAY=1000
# MAGE_X_DOWNLOAD_RESUME=false
# MAGE_X_DOWNLOAD_RETRIES=3
# MAGE_X_DOWNLOAD_TIMEOUT=5000
# MAGE_X_DOWNLOAD_USER_AGENT=MAGE-X-Agent
# MAGE_X_PARALLEL=3
# MAGE_X_TEST_RACE=false
# MAGE_X_VERBOSE=true

# ================================================================================================
# üîí SECURITY CONFIGURATION
# ================================================================================================

# Gitleaks Configuration
GITLEAKS_NOTIFY_USER_LIST=@mrz1836

# Empty = use default config
GITLEAKS_CONFIG_FILE=

# Nancy CVE Exclusions (known acceptable vulnerabilities)
NANCY_EXCLUDES=CVE-2024-38513,CVE-2023-45142

# ================================================================================================
# ü™ù PRE-COMMIT SYSTEM CONFIGURATION (go-pre-commit)
# ================================================================================================

# Pre-Commit System
GO_PRE_COMMIT_VERSION=v1.2.0             # https://github.com/mrz1836/go-pre-commit
GO_PRE_COMMIT_USE_LOCAL=false            # Use local version for development

# System Settings
GO_PRE_COMMIT_FAIL_FAST=false
GO_PRE_COMMIT_TIMEOUT_SECONDS=300
GO_PRE_COMMIT_TOOL_INSTALL_TIMEOUT=300
GO_PRE_COMMIT_AUTO_ADJUST_CI_TIMEOUTS=true
GO_PRE_COMMIT_PARALLEL_WORKERS=2
GO_PRE_COMMIT_LOG_LEVEL=debug
GO_PRE_COMMIT_MAX_FILE_SIZE_MB=10
GO_PRE_COMMIT_MAX_FILES_OPEN=100

# File Detection Strategy for CI
# true = Check all repository files (comprehensive but slower)
# false = Check only changed files in PR/push (faster, smart detection)
GO_PRE_COMMIT_ALL_FILES=true

# Tool Versions
GO_PRE_COMMIT_GOLANGCI_LINT_VERSION=v2.4.0     # https://github.com/golangci/golangci-lint
GO_PRE_COMMIT_FUMPT_VERSION=v0.8.0             # https://github.com/mvdan/gofumpt
GO_PRE_COMMIT_GOIMPORTS_VERSION=latest         # https://github.com/golang/tools

# Build Configuration
GO_PRE_COMMIT_BUILD_TAGS=                       # Build tags for golangci-lint and other tools

# Individual Checks
GO_PRE_COMMIT_ENABLE_FMT=true
GO_PRE_COMMIT_ENABLE_FUMPT=true
GO_PRE_COMMIT_ENABLE_GOIMPORTS=true
GO_PRE_COMMIT_ENABLE_LINT=true
GO_PRE_COMMIT_ENABLE_MOD_TIDY=true
GO_PRE_COMMIT_ENABLE_WHITESPACE=true
GO_PRE_COMMIT_ENABLE_EOF=true
GO_PRE_COMMIT_ENABLE_AI_DETECTION=true

# Auto-staging Settings
GO_PRE_COMMIT_FMT_AUTO_STAGE=true
GO_PRE_COMMIT_FUMPT_AUTO_STAGE=true
GO_PRE_COMMIT_GOIMPORTS_AUTO_STAGE=true
GO_PRE_COMMIT_WHITESPACE_AUTO_STAGE=true
GO_PRE_COMMIT_EOF_AUTO_STAGE=true
GO_PRE_COMMIT_AI_DETECTION_AUTO_FIX=false

# Check Timeouts (seconds)
GO_PRE_COMMIT_FMT_TIMEOUT=30
GO_PRE_COMMIT_FUMPT_TIMEOUT=30
GO_PRE_COMMIT_GOIMPORTS_TIMEOUT=30
GO_PRE_COMMIT_LINT_TIMEOUT=60
GO_PRE_COMMIT_MOD_TIDY_TIMEOUT=60
GO_PRE_COMMIT_WHITESPACE_TIMEOUT=30
GO_PRE_COMMIT_EOF_TIMEOUT=30
GO_PRE_COMMIT_AI_DETECTION_TIMEOUT=30

# Path Configuration
GO_PRE_COMMIT_HOOKS_PATH=.git/hooks
GO_PRE_COMMIT_EXCLUDE_PATTERNS=vendor/,node_modules/,.git/
GO_PRE_COMMIT_COLOR_OUTPUT=false

# Plugin System Configuration
GO_PRE_COMMIT_ENABLE_PLUGINS=true
GO_PRE_COMMIT_PLUGIN_DIR=.pre-commit-plugins
GO_PRE_COMMIT_PLUGIN_TIMEOUT=60

# ================================================================================================
# üìÖ STALE WORKFLOW CONFIGURATION
# ================================================================================================

STALE_DAYS_BEFORE_STALE=60
STALE_DAYS_BEFORE_CLOSE=14
STALE_LABEL=stale
STALE_EXEMPT_ISSUE_LABELS=work-in-progress,security,requires-manual-review
STALE_EXEMPT_PR_LABELS=work-in-progress,security,requires-manual-review
STALE_OPERATIONS_PER_RUN=300

# ================================================================================================
# üè∑Ô∏è SYNC LABELS CONFIGURATION
# ================================================================================================

SYNC_LABELS_FILE=.github/labels.yml

# ================================================================================================
# ü§ñ DEPENDABOT AUTO-MERGE CONFIGURATION
# ================================================================================================

DEPENDABOT_MAINTAINER_USERNAME=mrz1836
DEPENDABOT_AUTO_MERGE_PATCH=true
DEPENDABOT_AUTO_MERGE_MINOR_DEV=true
DEPENDABOT_AUTO_MERGE_MINOR_PROD=true
DEPENDABOT_AUTO_MERGE_SECURITY_NON_MAJOR=true
DEPENDABOT_ALERT_ON_MAJOR=true
DEPENDABOT_ALERT_ON_MINOR_PROD=true
DEPENDABOT_MANUAL_REVIEW_LABEL=requires-manual-review
DEPENDABOT_AUTO_MERGE_LABELS=automerge,dependabot

# ================================================================================================
# ‚úÖ AUTO-MERGE ON APPROVAL CONFIGURATION
# ================================================================================================

AUTO_MERGE_MIN_APPROVALS=1
AUTO_MERGE_REQUIRE_ALL_REQUESTED_REVIEWS=true
AUTO_MERGE_ALLOWED_MERGE_TYPES=squash
AUTO_MERGE_DELETE_BRANCH=true
AUTO_MERGE_SKIP_DRAFT=true
AUTO_MERGE_SKIP_WIP=true
AUTO_MERGE_WIP_LABELS=work-in-progress,wip,do-not-merge
AUTO_MERGE_COMMENT_ON_ENABLE=true
AUTO_MERGE_COMMENT_ON_DISABLE=true
AUTO_MERGE_LABELS_TO_ADD=auto-merge-enabled
AUTO_MERGE_SKIP_BOT_PRS=true

# ================================================================================================
# üìù PULL REQUEST MANAGEMENT CONFIGURATION
# ================================================================================================

PR_MANAGEMENT_DEFAULT_ASSIGNEE=mrz1836
PR_MANAGEMENT_SKIP_BOT_USERS=dependabot[bot],mergify[bot],copilot[bot]
PR_MANAGEMENT_WELCOME_FIRST_TIME=true
PR_MANAGEMENT_APPLY_SIZE_LABELS=true
PR_MANAGEMENT_APPLY_TYPE_LABELS=true
PR_MANAGEMENT_CLEAN_CACHE_ON_CLOSE=true
PR_MANAGEMENT_DELETE_BRANCH_ON_MERGE=true
PR_MANAGEMENT_PROTECTED_BRANCHES=master,main,development

# PR Size Thresholds
PR_MANAGEMENT_SIZE_XS_THRESHOLD=10
PR_MANAGEMENT_SIZE_S_THRESHOLD=50
PR_MANAGEMENT_SIZE_M_THRESHOLD=200
PR_MANAGEMENT_SIZE_L_THRESHOLD=500
