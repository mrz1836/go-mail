# ------------------------------------------------------------------------------------
#  Setup Go with Cache Composite Action (GoFortress)
#
#  Purpose: Complete Go environment setup with intelligent caching, version validation,
#  and toolchain management. Consolidates the common Go setup pattern used across
#  multiple GoFortress workflows.
#
#  Features:
#    - Smart cache restoration (module + build caches)
#    - Go version requirement validation against go.mod
#    - GOTOOLCHAIN environment management
#    - Cross-platform cache path setup
#    - Performance tracking outputs
#
#  Usage:
#    - uses: ./.github/actions/setup-go-with-cache
#      with:
#        go-version: ${{ matrix.go-version }}
#        matrix-os: ${{ matrix.os }}
#        go-primary-version: ${{ inputs.go-primary-version }}
#        go-secondary-version: ${{ inputs.go-secondary-version }}
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: "Setup Go with Cache"
description: "Complete Go environment setup with intelligent caching and version management"

inputs:
  go-version:
    description: "Go version to install (e.g., 1.23.x, 1.24.0)"
    required: true
  matrix-os:
    description: "Operating system for cache keys (e.g., ubuntu-latest, windows-latest)"
    required: true
  go-primary-version:
    description: "Primary Go version for toolchain comparison"
    required: true
  go-secondary-version:
    description: "Secondary Go version for toolchain comparison"
    required: true
  go-sum-file:
    description: "Path to go.sum file for cache key generation"
    required: true

outputs:
  go-version-actual:
    description: "Actual Go version that was installed"
    value: ${{ steps.setup-go.outputs.go-version }}
  version-mismatch:
    description: "Whether requested version was older than go.mod requirement"
    value: ${{ steps.check-go-version.outputs.version_mismatch }}
  module-cache-hit:
    description: "Whether Go module cache was restored from cache"
    value: ${{ steps.restore-gomod.outputs.cache-hit }}
  build-cache-hit:
    description: "Whether Go build cache was restored from cache"
    value: ${{ steps.restore-gobuild.outputs.cache-hit }}
  toolchain-mode:
    description: "Toolchain mode that was applied (local, auto, default)"
    value: ${{ steps.toolchain-summary.outputs.mode }}

runs:
  using: "composite"
  steps:
    # --------------------------------------------------------------------
    # Set Go cache paths (cross-platform)
    # --------------------------------------------------------------------
    - name: üîß Set Go cache paths (cross-platform)
      shell: bash
      run: |
        echo "üîß Setting up Go cache paths..."
        echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
        echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
        echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV
        echo "‚úÖ Cache paths configured successfully"

    # --------------------------------------------------------------------
    # Extract Go module directory from GO_SUM_FILE path
    # --------------------------------------------------------------------
    - name: üîß Extract Go module directory
      id: extract-module-dir
      shell: bash
      run: |
        GO_SUM_FILE="${{ inputs.go-sum-file }}"
        GO_MODULE_DIR=$(dirname "$GO_SUM_FILE")

        # Handle root directory case (dirname returns ".")
        if [ "$GO_MODULE_DIR" = "." ]; then
          GO_MODULE_DIR=""
          echo "üìÅ Go module directory: repository root"
        else
          echo "üìÅ Go module directory: $GO_MODULE_DIR"
        fi

        # Export for subsequent steps
        echo "GO_MODULE_DIR=$GO_MODULE_DIR" >> $GITHUB_ENV
        echo "module-dir=$GO_MODULE_DIR" >> $GITHUB_OUTPUT

    # --------------------------------------------------------------------
    # Validate go.sum exists for cache key generation
    # --------------------------------------------------------------------
    - name: üîç Validate go.sum exists
      shell: bash
      run: |
        GO_SUM_FILE="${{ inputs.go-sum-file }}"
        echo "üîç Checking for go.sum file at: $GO_SUM_FILE"
        if [ ! -f "$GO_SUM_FILE" ]; then
          echo "‚ùå ERROR: Go sum file not found at: $GO_SUM_FILE"
          echo "This is required for cache key generation using hashFiles('$GO_SUM_FILE')"
          echo "Ensure that:"
          echo "  1. The repository has been checked out properly"
          echo "  2. The go.sum file exists at the specified location: $GO_SUM_FILE"
          echo "  3. 'go mod tidy' or 'go mod download' has been run"
          exit 1
        fi
        echo "‚úÖ Go.sum found at $GO_SUM_FILE - cache keys will work correctly"

    # --------------------------------------------------------------------
    # DEBUG: Module cache key components
    # --------------------------------------------------------------------
    - name: "üîç Debug: Module cache key components"
      shell: bash
      run: |
        echo "============================================================"
        echo "üîç DEBUG: MODULE CACHE KEY COMPONENTS"
        echo "============================================================"

        # Show input components
        echo "üìã Input Values:"
        echo "  matrix-os: '${{ inputs.matrix-os }}'"
        echo "  go-sum-file: '${{ inputs.go-sum-file }}'"

        # Verify go.sum file details
        GO_SUM_FILE="${{ inputs.go-sum-file }}"
        if [ -f "$GO_SUM_FILE" ]; then
          echo ""
          echo "üìÑ Go.sum File Analysis:"
          echo "  Path: $GO_SUM_FILE"
          echo "  Size: $(wc -c < "$GO_SUM_FILE") bytes"
          echo "  Lines: $(wc -l < "$GO_SUM_FILE") lines"
          echo "  SHA256: $(sha256sum "$GO_SUM_FILE" | cut -d' ' -f1)"
          echo ""
          echo "üîç First 5 lines of go.sum:"
          head -5 "$GO_SUM_FILE" | sed 's/^/    /'
          echo ""
          echo "üîç Last 3 lines of go.sum:"
          tail -3 "$GO_SUM_FILE" | sed 's/^/    /'
        else
          echo "‚ùå ERROR: go.sum file not found at: $GO_SUM_FILE"
        fi

        # Show expected cache key pattern
        echo ""
        echo "üîë Expected Module Cache Key Pattern:"
        echo "  Pattern: ${{ inputs.matrix-os }}-gomod-[hash-of-go.sum]"
        echo "  Actual hash: ${{ hashFiles(inputs.go-sum-file) }}"
        echo "  Complete key: ${{ inputs.matrix-os }}-gomod-${{ hashFiles(inputs.go-sum-file) }}"
        echo ""
        echo "============================================================"

    # --------------------------------------------------------------------
    # Restore Go module cache (shared across versions)
    # --------------------------------------------------------------------
    - name: üíæ Restore Go module cache
      id: restore-gomod
      uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ~/go/pkg/mod
        key: ${{ inputs.matrix-os }}-gomod-${{ hashFiles(inputs.go-sum-file) }}

    # --------------------------------------------------------------------
    # DEBUG: Build cache key components
    # --------------------------------------------------------------------
    - name: "üîç Debug: Build cache key components"
      shell: bash
      run: |
        echo "============================================================"
        echo "üîç DEBUG: BUILD CACHE KEY COMPONENTS"
        echo "============================================================"

        # Show input components
        echo "üìã Input Values:"
        echo "  matrix-os: '${{ inputs.matrix-os }}'"
        echo "  go-version: '${{ inputs.go-version }}'"
        echo "  go-sum-file: '${{ inputs.go-sum-file }}'"

        # Verify go.sum file details (for build cache key)
        GO_SUM_FILE="${{ inputs.go-sum-file }}"
        if [ -f "$GO_SUM_FILE" ]; then
          echo ""
          echo "üìÑ Go.sum File Analysis (for build cache):"
          echo "  Path: $GO_SUM_FILE"
          echo "  Size: $(wc -c < "$GO_SUM_FILE") bytes"
          echo "  SHA256: $(sha256sum "$GO_SUM_FILE" | cut -d' ' -f1)"
          echo "  Last Modified: $(stat -c %y "$GO_SUM_FILE" 2>/dev/null || stat -f %Sm "$GO_SUM_FILE" 2>/dev/null || echo 'Unknown')"
        else
          echo "‚ùå ERROR: go.sum file not found at: $GO_SUM_FILE"
        fi

        # Show cache paths that will be used
        echo ""
        echo "üìÅ Build Cache Paths:"
        echo "  ~/.cache/go-build"
        echo "  ~/.cache/go-build/test"
        echo "  Resolved paths:"
        echo "    $(realpath ~/.cache/go-build 2>/dev/null || echo "~/.cache/go-build (will be created)")"
        echo "    $(realpath ~/.cache/go-build/test 2>/dev/null || echo "~/.cache/go-build/test (will be created)")"

        # Show expected cache key pattern
        echo ""
        echo "üîë Expected Build Cache Key Pattern:"
        echo "  Pattern: ${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-[hash-of-go.sum]"
        echo "  Actual hash: ${{ hashFiles(inputs.go-sum-file) }}"
        echo "  Complete key: ${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-${{ hashFiles(inputs.go-sum-file) }}"
        echo ""
        echo "============================================================"

    # --------------------------------------------------------------------
    # Restore Go build cache (per-version)
    # --------------------------------------------------------------------
    - name: üíæ Restore Go build cache
      id: restore-gobuild
      uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: |
          ~/.cache/go-build
          ~/.cache/go-build/test
        key: ${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-${{ hashFiles(inputs.go-sum-file) }}

    # --------------------------------------------------------------------
    # DEBUG: Cache restoration summary
    # --------------------------------------------------------------------
    - name: "üìä Debug: Cache restoration summary"
      shell: bash
      run: |
        echo "============================================================"
        echo "üìä DEBUG: CACHE RESTORATION SUMMARY"
        echo "============================================================"

        # Show cache hit/miss results
        echo "üéØ Cache Results:"
        echo "  Module cache hit: ${{ steps.restore-gomod.outputs.cache-hit }}"
        echo "  Build cache hit:  ${{ steps.restore-gobuild.outputs.cache-hit }}"

        # Show the actual keys that were used
        echo ""
        echo "üîë Actual Cache Keys Used:"
        MODULE_KEY="${{ inputs.matrix-os }}-gomod-${{ hashFiles(inputs.go-sum-file) }}"
        BUILD_KEY="${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-${{ hashFiles(inputs.go-sum-file) }}"
        echo "  Module: $MODULE_KEY"
        echo "  Build:  $BUILD_KEY"

        # Break down the keys for analysis
        echo ""
        echo "üîç Key Component Analysis:"
        echo "  OS component: '${{ inputs.matrix-os }}'"
        echo "  Go version component: '${{ inputs.go-version }}'"
        echo "  Go.sum hash component: '${{ hashFiles(inputs.go-sum-file) }}'"

        # Cache effectiveness summary
        echo ""
        echo "üí° Cache Effectiveness:"
        if [[ "${{ steps.restore-gomod.outputs.cache-hit }}" == "true" ]]; then
          echo "  ‚úÖ Module cache: HIT - Dependencies will load quickly"
        else
          echo "  ‚ùå Module cache: MISS - Will download dependencies fresh"
        fi

        if [[ "${{ steps.restore-gobuild.outputs.cache-hit }}" == "true" ]]; then
          echo "  ‚úÖ Build cache: HIT - Builds will be faster"
        else
          echo "  ‚ùå Build cache: MISS - Will rebuild everything fresh"
        fi

        # Debugging hints for cache misses
        echo ""
        echo "üõ†Ô∏è If experiencing frequent cache misses, check:"
        echo "  1. go.sum file changes (different dependencies)"
        echo "  2. OS matrix differences (ubuntu-latest vs ubuntu-22.04)"
        echo "  3. Go version changes or format differences"
        echo "  4. Repository checkout differences affecting file paths"
        echo ""
        echo "============================================================"

    # --------------------------------------------------------------------
    # Check go.mod required version before setting up Go
    # --------------------------------------------------------------------
    - name: üîç Check Go version requirement
      id: check-go-version
      shell: bash
      run: |
        echo "üîç Checking Go version requirements..."
        GO_MODULE_DIR="${{ env.GO_MODULE_DIR }}"

        # Construct the path to go.mod
        if [ -n "$GO_MODULE_DIR" ]; then
          GO_MOD_PATH="$GO_MODULE_DIR/go.mod"
        else
          GO_MOD_PATH="go.mod"
        fi

        if [ -f "$GO_MOD_PATH" ]; then
          REQUIRED_VERSION=$(grep -E '^go\s+[0-9]+\.[0-9]+' "$GO_MOD_PATH" | awk '{print $2}')
          if [ -n "$REQUIRED_VERSION" ]; then
            echo "üìã go.mod at $GO_MOD_PATH requires Go version: $REQUIRED_VERSION"
            echo "required_version=$REQUIRED_VERSION" >> $GITHUB_OUTPUT

            # Extract major.minor from requested version (handle formats like 1.23.x, 1.23, 1.23.4)
            REQUESTED_VERSION="${{ inputs.go-version }}"
            REQUESTED_MAJOR_MINOR=$(echo "$REQUESTED_VERSION" | grep -oE '^[0-9]+\.[0-9]+')

            # Compare versions
            if [ -n "$REQUESTED_MAJOR_MINOR" ]; then
              # Convert to comparable format (e.g., 1.23 -> 123, 1.9 -> 109)
              REQ_COMPARABLE=$(echo "$REQUIRED_VERSION" | awk -F. '{printf "%d%02d", $1, $2}')
              REQUESTED_COMPARABLE=$(echo "$REQUESTED_MAJOR_MINOR" | awk -F. '{printf "%d%02d", $1, $2}')

              if [ "$REQUESTED_COMPARABLE" -lt "$REQ_COMPARABLE" ]; then
                echo "‚ö†Ô∏è WARNING: Requested Go version (${{ inputs.go-version }}) is older than required ($REQUIRED_VERSION)"
                echo "version_mismatch=true" >> $GITHUB_OUTPUT
              else
                echo "‚úÖ Requested Go version (${{ inputs.go-version }}) meets requirement ($REQUIRED_VERSION)"
                echo "version_mismatch=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "version_mismatch=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ÑπÔ∏è No Go version requirement found in $GO_MOD_PATH"
            echo "version_mismatch=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ÑπÔ∏è No go.mod file found at $GO_MOD_PATH"
          echo "version_mismatch=false" >> $GITHUB_OUTPUT
        fi

    # --------------------------------------------------------------------
    # Determine Go Toolchain Mode
    # --------------------------------------------------------------------
    - name: üßÆ Determine Go Toolchain Mode
      id: toolchain-mode
      shell: bash
      run: |
        echo "üßÆ Determining Go toolchain mode..."

        # If there's a version mismatch, allow toolchain to auto-upgrade
        if [[ "${{ steps.check-go-version.outputs.version_mismatch }}" == "true" ]]; then
          echo "‚ö†Ô∏è Version mismatch detected - allowing Go toolchain to auto-upgrade"
          echo "Not setting GOTOOLCHAIN (using default auto behavior)"
          echo "mode=auto" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.go-version }}" == "${{ inputs.go-secondary-version }}" && \
              "${{ inputs.go-version }}" != "${{ inputs.go-primary-version }}" ]]; then
          echo "üîí Setting GOTOOLCHAIN=local for secondary version"
          echo "GOTOOLCHAIN=local" >> $GITHUB_ENV
          echo "mode=local" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Not setting GOTOOLCHAIN (using default)"
          echo "mode=default" >> $GITHUB_OUTPUT
        fi

    # --------------------------------------------------------------------
    # Set up Go
    # --------------------------------------------------------------------
    - name: üèóÔ∏è Set up Go
      id: setup-go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ inputs.go-version }}
        cache: false # we handle caches ourselves

    # --------------------------------------------------------------------
    # Summary and validation
    # --------------------------------------------------------------------
    - name: ‚úÖ Go setup summary
      id: toolchain-summary
      shell: bash
      run: |
        ACTUAL_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
        echo "‚úÖ Go setup completed successfully"
        echo "üìã Requested version: ${{ inputs.go-version }}"
        echo "üìã Actual version: $ACTUAL_VERSION"
        echo "üìã Module cache hit: ${{ steps.restore-gomod.outputs.cache-hit }}"
        echo "üìã Build cache hit: ${{ steps.restore-gobuild.outputs.cache-hit }}"
        echo "üìã Toolchain mode: ${{ steps.toolchain-mode.outputs.mode }}"

        # Pass toolchain mode to outputs
        echo "mode=${{ steps.toolchain-mode.outputs.mode }}" >> $GITHUB_OUTPUT
