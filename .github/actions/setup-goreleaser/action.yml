# ------------------------------------------------------------------------------------
#  Setup GoReleaser Composite Action (GoFortress)
#
#  Purpose: Install and cache GoReleaser binary for use in GitHub Actions workflows.
#  Uses the official goreleaser-action in install-only mode to ensure reliable
#  installation and proper PATH configuration.
#
#  Features:
#    - Uses official goreleaser-action for reliable installation
#    - Smart binary caching by OS and version
#    - Automatic PATH management for immediate availability
#    - MAGE_X_ prefixed environment variables for integration
#    - Performance tracking outputs
#
#  Usage:
#    - uses: ./.github/actions/setup-goreleaser
#      with:
#        goreleaser-version: ${{ env.MAGE_X_GORELEASER_VERSION }}
#        runner-os: ${{ runner.os }}
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: "Setup GoReleaser"
description: "Install and cache GoReleaser binary with automatic PATH management"

inputs:
  goreleaser-version:
    description: "GoReleaser version to install (e.g., vX.Y.Z)"
    required: true
  runner-os:
    description: "Runner OS for cache key (e.g., ubuntu-latest, windows-latest)"
    required: true

outputs:
  cache-hit:
    description: "Whether GoReleaser was restored from cache (true/false)"
    value: ${{ steps.goreleaser-cache.outputs.cache-hit }}
  installation-method:
    description: "How GoReleaser was obtained: cached, fresh, or pre-existing"
    value: ${{ steps.installation-summary.outputs.method }}
  goreleaser-path:
    description: "Path to the installed GoReleaser binary"
    value: ${{ steps.installation-summary.outputs.goreleaser-path }}

runs:
  using: "composite"
  steps:
    # ————————————————————————————————————————————————————————————————
    # Check if GoReleaser is already available
    # ————————————————————————————————————————————————————————————————
    - name: 🔍 Check existing GoReleaser installation
      id: check-existing
      shell: bash
      run: |
        if command -v goreleaser >/dev/null 2>&1; then
          EXISTING_VERSION=$(goreleaser --version 2>/dev/null | grep "GitVersion:" | awk '{print $2}' || echo "unknown")
          GORELEASER_PATH=$(which goreleaser)
          echo "✅ GoReleaser already available: $EXISTING_VERSION at $GORELEASER_PATH"
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "version=$EXISTING_VERSION" >> $GITHUB_OUTPUT
          echo "path=$GORELEASER_PATH" >> $GITHUB_OUTPUT
        else
          echo "ℹ️ GoReleaser not found, will install"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    # ————————————————————————————————————————————————————————————————
    # Restore cache for goreleaser binary (skip if already exists)
    # ————————————————————————————————————————————————————————————————
    - name: 💾 Restore goreleaser binary cache
      id: goreleaser-cache
      if: steps.check-existing.outputs.exists != 'true'
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: |
          ~/.cache/goreleaser-bin
        key: ${{ inputs.runner-os }}-goreleaser-${{ inputs.goreleaser-version }}

    # ————————————————————————————————————————————————————————————————
    # Make cached goreleaser usable by copying to GOPATH/bin and adding to PATH
    # ————————————————————————————————————————————————————————————————
    - name: 🛠️ Make cached goreleaser usable
      if: steps.check-existing.outputs.exists != 'true' && steps.goreleaser-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        set -euo pipefail
        BIN_DIR="$HOME/.cache/goreleaser-bin"
        GORELEASER_BIN="$BIN_DIR/goreleaser"

        # If we restored a cache, copy it into GOPATH/bin
        if [[ -f "$GORELEASER_BIN" ]]; then
          echo "✅ Using cached goreleaser binary"
          mkdir -p "$(go env GOPATH)/bin"
          cp "$GORELEASER_BIN" "$(go env GOPATH)/bin/"
          chmod +x "$(go env GOPATH)/bin/goreleaser"
        fi

        # Make sure the binary location is on PATH for *all* subsequent steps
        echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

    # ————————————————————————————————————————————————————————————————
    # Install GoReleaser using official action *only* when cache miss
    # ————————————————————————————————————————————————————————————————
    - name: ✅ Install GoReleaser (cache miss)
      if: steps.check-existing.outputs.exists != 'true' && steps.goreleaser-cache.outputs.cache-hit != 'true'
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: ${{ inputs.goreleaser-version }}
        install-only: true

    # ————————————————————————————————————————————————————————————————
    # Cache the freshly installed binary for future runs
    # ————————————————————————————————————————————————————————————————
    - name: 💾 Cache freshly installed goreleaser
      if: steps.check-existing.outputs.exists != 'true' && steps.goreleaser-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Find and cache the goreleaser binary
        GORELEASER_PATH=$(which goreleaser)
        if [[ -n "$GORELEASER_PATH" ]]; then
          mkdir -p ~/.cache/goreleaser-bin
          cp "$GORELEASER_PATH" ~/.cache/goreleaser-bin/
          echo "✅ GoReleaser cached for future runs"
        fi

    # ————————————————————————————————————————————————————————————————
    # Set MAGE_X_ prefixed environment variables
    # ————————————————————————————————————————————————————————————————
    - name: 🔧 Set MAGE_X environment variables
      shell: bash
      run: |
        # Get goreleaser path and version
        GORELEASER_PATH=$(which goreleaser)
        GORELEASER_VERSION=$(goreleaser --version 2>/dev/null | grep "GitVersion:" | awk '{print $2}' || echo "unknown")

        echo "🔧 Setting MAGE_X environment variables..."
        echo "MAGE_X_GORELEASER_PATH=$GORELEASER_PATH" >> $GITHUB_ENV
        echo "MAGE_X_GORELEASER_INSTALLED=true" >> $GITHUB_ENV
        echo "MAGE_X_GORELEASER_CACHED_VERSION=$GORELEASER_VERSION" >> $GITHUB_ENV

        echo "✅ MAGE_X_GORELEASER_PATH=$GORELEASER_PATH"
        echo "✅ MAGE_X_GORELEASER_INSTALLED=true"
        echo "✅ MAGE_X_GORELEASER_CACHED_VERSION=$GORELEASER_VERSION"

    # ————————————————————————————————————————————————————————————————
    # Verify GoReleaser installation and set outputs
    # ————————————————————————————————————————————————————————————————
    - name: 🔍 Verify GoReleaser installation
      id: installation-summary
      shell: bash
      run: |
        echo "🔍 Verifying GoReleaser installation..."

        # Test that goreleaser is available and working
        if command -v goreleaser >/dev/null 2>&1; then
          GORELEASER_VERSION=$(goreleaser --version 2>/dev/null | grep "GitVersion:" | awk '{print $2}' || echo "unknown")
          GORELEASER_PATH=$(which goreleaser)
          echo "✅ GoReleaser is available: $GORELEASER_VERSION"
          echo "📍 GoReleaser path: $GORELEASER_PATH"

          # Determine installation method
          if [[ "${{ steps.check-existing.outputs.exists }}" == "true" ]]; then
            echo "method=pre-existing" >> $GITHUB_OUTPUT
            echo "📋 Installation method: Pre-existing installation"
          elif [[ "${{ steps.goreleaser-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "method=cached" >> $GITHUB_OUTPUT
            echo "📋 Installation method: Restored from cache"
          else
            echo "method=fresh" >> $GITHUB_OUTPUT
            echo "📋 Installation method: Fresh installation via goreleaser-action"
          fi

          echo "goreleaser-path=$GORELEASER_PATH" >> $GITHUB_OUTPUT
        else
          echo "❌ ERROR: GoReleaser is not available in PATH" >&2
          echo "PATH contents:" >&2
          echo "$PATH" >&2
          exit 1
        fi
