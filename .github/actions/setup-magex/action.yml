# ------------------------------------------------------------------------------------
#  Setup MAGE-X Composite Action (GoFortress)
#
#  Purpose: Download and cache MAGE-X binary for use in GitHub Actions workflows.
#  Provides efficient caching by OS and version, with automatic binary download on cache
#  miss and PATH management for seamless integration.
#
#  Features:
#    - Smart binary caching by OS and version
#    - Automatic binary download only on cache miss
#    - PATH management for immediate availability
#    - Performance tracking outputs
#
#  Usage:
#    - uses: ./.github/actions/setup-magex
#      with:
#        magex-version: ${{ env.MAGE_X_VERSION }}
#        runner-os: ${{ runner.os }}
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: "Setup MAGE-X"
description: "Download and cache MAGE-X binary with automatic PATH management"

inputs:
  magex-version:
    description: "MAGE-X version to download (e.g., v1.15.0)"
    required: true
  runner-os:
    description: "Runner OS for cache key (e.g., ubuntu-latest, windows-latest)"
    required: true

outputs:
  cache-hit:
    description: "Whether MAGE-X was restored from cache (true/false)"
    value: ${{ steps.magex-cache.outputs.cache-hit }}
  installation-method:
    description: "How MAGE-X was obtained: cached, fresh, or pre-existing"
    value: ${{ steps.installation-summary.outputs.method }}

runs:
  using: "composite"
  steps:
    # --------------------------------------------------------------------
    # Restore (and later save) a compact cache for the magex binary
    # --------------------------------------------------------------------
    - name: 💾 Restore magex binary cache
      id: magex-cache
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: |
          ~/.cache/magex-bin
        key: ${{ inputs.runner-os }}-magex-${{ inputs.magex-version }}

    # --------------------------------------------------------------------
    # Make cached magex usable by copying to GOPATH/bin and adding to PATH
    # --------------------------------------------------------------------
    - name: 🛠️ Make cached magex usable
      shell: bash
      run: |
        set -euo pipefail
        BIN_DIR="$HOME/.cache/magex-bin"
        MAGEX_BIN="$BIN_DIR/magex"

        # If we restored a cache, copy/link it into GOPATH/bin.
        if [[ -f "$MAGEX_BIN" ]]; then
          echo "✅ Using cached magex binary"
          mkdir -p "$(go env GOPATH)/bin"
          cp "$MAGEX_BIN" "$(go env GOPATH)/bin/"
        fi

        # Make sure the binary location is on PATH for *all* subsequent steps.
        echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

    # --------------------------------------------------------------------
    # Detect platform and download MAGE-X binary *only* when the cache was empty.
    # --------------------------------------------------------------------
    - name: ✅ Download MAGE-X binary (cache miss)
      if: steps.magex-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "⬇️ Cache miss – downloading MAGE-X binary..."
        echo "📋 Downloading MAGE-X version ${{ inputs.magex-version }}..."

        # Detect platform and architecture
        OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)

        # Map architecture names to MAGE-X naming convention
        case "$ARCH" in
          x86_64|amd64) ARCH="amd64" ;;
          aarch64|arm64) ARCH="arm64" ;;
          *) echo "❌ Unsupported architecture: $ARCH" && exit 1 ;;
        esac

        # Map OS names to MAGE-X naming convention
        case "$OS" in
          linux) OS="linux" ;;
          macos) OS="darwin" ;;
          windows) OS="windows" ;;
          *) echo "❌ Unsupported OS: $OS" && exit 1 ;;
        esac

        echo "📋 Detected platform: ${OS}_${ARCH}"

        # Clean version (remove 'v' prefix if present)
        VERSION="${{ inputs.magex-version }}"
        CLEAN_VERSION="${VERSION#v}"

        # Build download URL
        DOWNLOAD_URL="https://github.com/mrz1836/mage-x/releases/download/$VERSION/mage-x_${CLEAN_VERSION}_${OS}_${ARCH}.tar.gz"
        echo "📥 Downloading from: $DOWNLOAD_URL"

        # Download and extract
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"

        if curl -fsSL "$DOWNLOAD_URL" -o mage-x.tar.gz; then
          echo "✅ Download successful"
        else
          echo "❌ Download failed from $DOWNLOAD_URL"
          exit 1
        fi

        # Extract the tarball
        if tar -xzf mage-x.tar.gz; then
          echo "✅ Extraction successful"
        else
          echo "❌ Extraction failed"
          exit 1
        fi

        # Find the magex binary (it should be in the extracted directory)
        MAGEX_BINARY=$(find . -name "magex" -type f | head -1)
        if [[ -z "$MAGEX_BINARY" ]]; then
          echo "❌ Could not find magex binary in extracted files"
          ls -la
          exit 1
        fi

        echo "✅ Found magex binary at: $MAGEX_BINARY"

        # Make it executable and copy to GOPATH/bin
        chmod +x "$MAGEX_BINARY"
        mkdir -p "$(go env GOPATH)/bin"
        cp "$MAGEX_BINARY" "$(go env GOPATH)/bin/magex"

        # Copy to cache directory for future runs
        mkdir -p ~/.cache/magex-bin
        cp "$MAGEX_BINARY" ~/.cache/magex-bin/magex

        # Cleanup
        cd /
        rm -rf "$TEMP_DIR"

        echo "✅ MAGE-X binary downloaded and cached"

    # --------------------------------------------------------------------
    # Verify MAGE-X installation and set outputs
    # --------------------------------------------------------------------
    - name: 🔍 Verify MAGE-X installation
      id: installation-summary
      shell: bash
      run: |
        echo "🔍 Verifying MAGE-X installation..."

        # Test that magex is available and working
        if command -v magex >/dev/null 2>&1; then
          MAGEX_VERSION=$(magex --version 2>/dev/null | grep -E '^\s+Version:' | awk '{print $2}' || echo "unknown")
          echo "✅ MAGE-X is available: $MAGEX_VERSION"

          # Determine installation method
          if [[ "${{ steps.magex-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "method=cached" >> $GITHUB_OUTPUT
            echo "📋 Installation method: Restored from cache"
          else
            echo "method=fresh" >> $GITHUB_OUTPUT
            echo "📋 Installation method: Fresh binary download"
          fi
        else
          echo "❌ ERROR: MAGE-X is not available in PATH" >&2
          exit 1
        fi
