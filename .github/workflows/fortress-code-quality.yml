# ------------------------------------------------------------------------------------
#  Code Quality (Reusable Workflow) (GoFortress)
#
#  Purpose: Run code quality checks including Go vet (static analysis) and
#  golangci-lint (comprehensive linting).
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Code Quality)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      go-lint-enabled:
        description: "Whether Go linting is enabled"
        required: true
        type: string
      yaml-lint-enabled:
        description: "Whether YAML linting is enabled"
        required: true
        type: string
      static-analysis-enabled:
        description: "Whether static analysis is enabled"
        required: true
        type: string
      go-sum-file:
        description: "Path to go.sum file for dependency verification"
        required: true
        type: string
    outputs:
      golangci-lint-version:
        description: "Version of golangci-lint used in the workflow"
        value: ${{ jobs.lint.outputs.golangci-lint-version }}
      yamlfmt-version:
        description: "Version of yamlfmt used in the workflow"
        value: ${{ jobs.yaml-format.outputs.yamlfmt-version }}
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

# Security: Restrictive default permissions with job-level overrides for least privilege access
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Go Vet (Static Analysis)
  # ----------------------------------------------------------------------------------
  govet:
    name: 📊 Govet (Static Analysis)
    if: ${{ inputs.static-analysis-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    steps:
      # --------------------------------------------------------------------
      # Checkout code (required for local actions)
      # --------------------------------------------------------------------
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # --------------------------------------------------------------------
      # Parse environment variables
      # --------------------------------------------------------------------
      - name: 🔧 Parse environment variables
        uses: ./.github/actions/parse-env
        with:
          env-json: ${{ inputs.env-json }}

      # --------------------------------------------------------------------
      # Setup Go with caching and version management
      # --------------------------------------------------------------------
      - name: 🏗️ Setup Go with Cache
        id: setup-go-vet
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ inputs.go-primary-version }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-primary-version }}
          go-sum-file: ${{ env.GO_SUM_FILE }}

      # --------------------------------------------------------------------
      # Extract Go module directory from GO_SUM_FILE path
      # --------------------------------------------------------------------
      - name: 🔧 Extract Go module directory
        uses: ./.github/actions/extract-module-dir
        with:
          go-sum-file: ${{ env.GO_SUM_FILE }}

      # --------------------------------------------------------------------
      # Setup MAGE-X (required for magex lint command)
      # --------------------------------------------------------------------
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ inputs.primary-runner }}

      # --------------------------------------------------------------------
      # Run go vet with sequential execution to avoid memory issues
      # --------------------------------------------------------------------
      - name: 🔍 Go vet (sequential)
        run: |
          echo "🚀 Running static analysis with go vet (sequential mode)..."
          GO_MODULE_DIR="${{ env.GO_MODULE_DIR }}"

          # Run go vet on packages sequentially to reduce memory usage
          if [ -n "$GO_MODULE_DIR" ]; then
            echo "🔧 Running go vet from directory: $GO_MODULE_DIR"
            cd "$GO_MODULE_DIR"
          else
            echo "🔧 Running go vet from repository root"
          fi

          # Get all packages and vet them one at a time
          # Capture go list output and check for errors
          if ! PACKAGES=$(go list ./... 2>&1 | grep -v /vendor/); then
            echo "❌ go list command failed"
            exit 1
          fi

          TOTAL=$(echo "$PACKAGES" | grep -c . || echo 0)
          CURRENT=0

          echo "📦 Found $TOTAL packages to vet"

          if [ "$TOTAL" -eq 0 ]; then
            echo "⚠️ No packages found to vet"
            exit 1
          fi

          for pkg in $PACKAGES; do
            CURRENT=$((CURRENT + 1))
            echo "[$CURRENT/$TOTAL] Vetting $pkg..."
            if ! go vet "$pkg"; then
              echo "❌ go vet failed on package: $pkg"
              exit 1
            fi
          done

          echo "✅ Static analysis completed successfully"

      # --------------------------------------------------------------------
      # Summary of Go vet results
      # --------------------------------------------------------------------
      - name: 📊 Job Summary
        run: |
          echo "## 📊 Go Vet Static Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis Details | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tool** | go vet (Official Go Static Analyzer) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Execution** | Sequential (memory-optimized) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope** | ./... (excludes dependencies) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ No issues found |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **All packages passed static analysis checks.**" >> $GITHUB_STEP_SUMMARY

      # --------------------------------------------------------------------
      # Collect cache statistics
      # --------------------------------------------------------------------
      - name: 📊 Collect cache statistics
        id: cache-stats-govet
        if: always()
        uses: ./.github/actions/collect-cache-stats
        with:
          workflow-name: govet
          job-name: govet
          os: ${{ inputs.primary-runner }}
          go-version: ${{ inputs.go-primary-version }}
          cache-prefix: cache-stats
          gomod-cache-hit: ${{ steps.setup-go-vet.outputs.module-cache-hit }}
          gobuild-cache-hit: ${{ steps.setup-go-vet.outputs.build-cache-hit }}

      # --------------------------------------------------------------------
      # Upload infrastructure cache statistics
      # --------------------------------------------------------------------
      - name: 📤 Upload infrastructure cache statistics
        if: always()
        uses: ./.github/actions/upload-statistics
        with:
          artifact-name: cache-stats-govet
          artifact-path: cache-stats-govet.json
          retention-days: 1

  # ----------------------------------------------------------------------------------
  # Lint (Code Linting)
  # ----------------------------------------------------------------------------------
  lint:
    name: ✨ Lint Code
    if: ${{ inputs.go-lint-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      golangci-lint-version: ${{ steps.golangci-lint-version.outputs.version }}
    steps:
      # --------------------------------------------------------------------
      # Checkout code (required for local actions)
      # --------------------------------------------------------------------
      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # --------------------------------------------------------------------
      # Parse environment variables
      # --------------------------------------------------------------------
      - name: 🔧 Parse environment variables
        uses: ./.github/actions/parse-env
        with:
          env-json: ${{ inputs.env-json }}

      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # --------------------------------------------------------------------
      # Extract golangci-lint version (MAGE-X managed)
      # --------------------------------------------------------------------
      - name: 🔍 Use MAGE-X managed golangci-lint version
        id: golangci-lint-version
        run: |
          # MAGE-X handles golangci-lint version automatically
          echo "✅ Using MAGE-X managed golangci-lint version"
          echo "version=${{ env.MAGE_X_GOLANGCI_LINT_VERSION }}" >> $GITHUB_OUTPUT

      # --------------------------------------------------------------------
      # Setup Go with caching and version management
      # --------------------------------------------------------------------
      - name: 🏗️ Setup Go with Cache
        id: setup-go-lint
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ inputs.go-primary-version }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-primary-version }}
          go-sum-file: ${{ env.GO_SUM_FILE }}

      # --------------------------------------------------------------------
      # Extract Go module directory from GO_SUM_FILE path
      # --------------------------------------------------------------------
      - name: 🔧 Extract Go module directory
        uses: ./.github/actions/extract-module-dir
        with:
          go-sum-file: ${{ env.GO_SUM_FILE }}

      # --------------------------------------------------------------------
      # Setup MAGE-X (required for magex lint command)
      # --------------------------------------------------------------------
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ inputs.primary-runner }}

      # --------------------------------------------------------------------
      # Restore Cache golangci-lint
      # --------------------------------------------------------------------
      - name: 💾 Cache golangci-lint analysis
        id: cache-golangci-lint
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ env.GOLANGCI_LINT_CACHE }}
          key: ${{ inputs.primary-runner }}-golangci-lint-analysis-${{ hashFiles('.golangci.json', env.GO_SUM_FILE) }}-${{ steps.golangci-lint-version.outputs.version }}

      - name: 🔍 Debug cache usage
        run: |
          echo "🔍 Module cache size: $(du -sh $GOMODCACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Build cache size: $(du -sh $GOCACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Lint cache size: $(du -sh $GOLANGCI_LINT_CACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Checking if vendor directory exists: $(ls -la | grep vendor || echo 'No vendor directory')"

      # --------------------------------------------------------------------
      # Run golangci-lint
      # --------------------------------------------------------------------
      - name: ✨ Run golangci-lint
        run: |
          echo "🧹 Running code linting with golangci-lint..."
          echo "💾 Golangci-lint cache location: $GOLANGCI_LINT_CACHE"
          echo "📁 Module cache path: $GOMODCACHE"

          # Export the cache directory for golangci-lint
          export GOLANGCI_LINT_CACHE=$GOLANGCI_LINT_CACHE

          GO_MODULE_DIR="${{ env.GO_MODULE_DIR }}"

          if [ -n "$GO_MODULE_DIR" ]; then
            echo "🔧 Running magex lint from directory: $GO_MODULE_DIR"
            (cd "$GO_MODULE_DIR" && magex lint)
          else
            echo "🔧 Running magex lint from repository root"
            magex lint
          fi

          echo "✅ Code linting completed successfully"

      # --------------------------------------------------------------------
      # Summary of golangci-lint results
      # --------------------------------------------------------------------
      - name: 📊 Job Summary
        run: |
          echo "## ✨ Code Linting Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Linting Details | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Configuration** | Custom ruleset via .golangci.json |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.golangci-lint-version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cache** | 💾 Analysis cache enabled |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ All checks passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Code quality standards met - no linting issues found.**" >> $GITHUB_STEP_SUMMARY

      # --------------------------------------------------------------------
      # Collect cache statistics
      # --------------------------------------------------------------------
      - name: 📊 Collect cache statistics
        id: cache-stats-lint
        if: always()
        uses: ./.github/actions/collect-cache-stats
        with:
          workflow-name: lint
          job-name: lint
          os: ${{ inputs.primary-runner }}
          go-version: ${{ inputs.go-primary-version }}
          cache-prefix: cache-stats
          gomod-cache-hit: ${{ steps.setup-go-lint.outputs.module-cache-hit }}
          gobuild-cache-hit: ${{ steps.setup-go-lint.outputs.build-cache-hit }}
          include-golangci: true

      # --------------------------------------------------------------------
      # Upload infrastructure cache statistics
      # --------------------------------------------------------------------
      - name: 📤 Upload infrastructure cache statistics
        if: always()
        uses: ./.github/actions/upload-statistics
        with:
          artifact-name: cache-stats-lint
          artifact-path: cache-stats-lint.json
          retention-days: 1

  # ----------------------------------------------------------------------------------
  # YAML/JSON Format Validation (MAGE-X)
  # ----------------------------------------------------------------------------------
  yaml-format:
    name: 📐 YAML/JSON Format Validation
    if: ${{ inputs.yaml-lint-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      yamlfmt-version: ${{ steps.yamlfmt-version.outputs.version }}
    steps:
      # --------------------------------------------------------------------
      # Checkout code (required for local actions)
      # --------------------------------------------------------------------
      - name: 📥 Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # --------------------------------------------------------------------
      # Parse environment variables
      # --------------------------------------------------------------------
      - name: 🔧 Parse environment variables
        uses: ./.github/actions/parse-env
        with:
          env-json: ${{ inputs.env-json }}

      # --------------------------------------------------------------------
      # Setup Go with caching and version management
      # --------------------------------------------------------------------
      - name: 🏗️ Setup Go with Cache
        id: setup-go-yaml
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ inputs.go-primary-version }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ inputs.go-primary-version }}
          go-secondary-version: ${{ inputs.go-primary-version }}
          go-sum-file: ${{ env.GO_SUM_FILE }}

      # --------------------------------------------------------------------
      # Extract Go module directory from GO_SUM_FILE path
      # --------------------------------------------------------------------
      - name: 🔧 Extract Go module directory
        uses: ./.github/actions/extract-module-dir
        with:
          go-sum-file: ${{ env.GO_SUM_FILE }}

      # --------------------------------------------------------------------
      # Setup MAGE-X (required for magex format:fix command)
      # --------------------------------------------------------------------
      - name: 🔧 Setup MAGE-X
        uses: ./.github/actions/setup-magex
        with:
          magex-version: ${{ env.MAGE_X_VERSION }}
          runner-os: ${{ inputs.primary-runner }}

      # --------------------------------------------------------------------
      # Get yamlfmt version from MAGE-X
      # --------------------------------------------------------------------
      - name: 🔍 Get yamlfmt version
        id: yamlfmt-version
        run: |
          echo "✅ Using MAGE-X managed yamlfmt version"
          echo "version=${{ env.MAGE_X_YAMLFMT_VERSION }}" >> $GITHUB_OUTPUT

      # --------------------------------------------------------------------
      # List YAML/JSON files to be formatted (for transparency)
      # --------------------------------------------------------------------
      - name: 📋 List YAML/JSON files to check
        run: |
          echo "📊 YAML/JSON files that will be validated:"
          find . -type f \( -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) \
            -not -path "./.git/*" \
            -not -path "./vendor/*" \
            -not -path "./node_modules/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" \
            -not -path "./coverage/*" | sort || true

          TOTAL_FILES=$(find . -type f \( -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) \
            -not -path "./.git/*" \
            -not -path "./vendor/*" \
            -not -path "./node_modules/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" \
            -not -path "./coverage/*" | wc -l | xargs)

          echo "TOTAL_FILES=$TOTAL_FILES" >> $GITHUB_ENV
          echo ""
          echo "📈 Total YAML/JSON files found: $TOTAL_FILES"

      # --------------------------------------------------------------------
      # Run MAGE-X format:check to validate formatting
      # --------------------------------------------------------------------
      - name: 🔍 Check YAML/JSON formatting with MAGE-X
        run: |
          echo "🔍 Checking YAML/JSON file formatting with MAGE-X format:check..."
          echo "📄 Configuration file: .github/.yamlfmt"
          echo "🔧 yamlfmt version: ${{ steps.yamlfmt-version.outputs.version }}"
          echo ""

          GO_MODULE_DIR="${{ env.GO_MODULE_DIR }}"

          # Run magex format:check to validate formatting without modifying files
          if [ -n "$GO_MODULE_DIR" ]; then
            echo "🔧 Running magex format:check from directory: $GO_MODULE_DIR"
            if (cd "$GO_MODULE_DIR" && magex format:check); then
              echo "✅ All YAML/JSON files are properly formatted"
            else
              echo "❌ YAML/JSON formatting issues detected"
              echo ""
              echo "🔧 To fix these issues locally, run:"
              echo "    cd $GO_MODULE_DIR && magex format:fix"
              echo ""
              echo "📚 yamlfmt Configuration (.github/.yamlfmt):"
              echo "    • Indent style: spaces (2 spaces)"
              echo "    • End of line: LF"
              echo "    • Final newline: required"
              echo "    • Line breaks: preserved where sensible"
              echo "    • Comment padding: 1 space after #"
              exit 1
            fi
          else
            echo "🔧 Running magex format:check from repository root"
            if magex format:check; then
              echo "✅ All YAML/JSON files are properly formatted"
            else
              echo "❌ YAML/JSON formatting issues detected"
              echo ""
              echo "🔧 To fix these issues locally, run:"
              echo "    magex format:fix"
              echo ""
              echo "📚 yamlfmt Configuration (.github/.yamlfmt):"
              echo "    • Indent style: spaces (2 spaces)"
              echo "    • End of line: LF"
              echo "    • Final newline: required"
              echo "    • Line breaks: preserved where sensible"
              echo "    • Comment padding: 1 space after #"
              exit 1
            fi
          fi

      # --------------------------------------------------------------------
      # Job Summary
      # --------------------------------------------------------------------
      - name: 📊 Job Summary
        run: |
          echo "## 📐 YAML/JSON Format Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Validation Details | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tool** | MAGE-X format:fix (yamlfmt) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.yamlfmt-version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Configuration** | .github/.yamlfmt |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope** | All .yml, .yaml, and .json files |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ All files properly formatted |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File Processing Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total files processed**: ${{ env.TOTAL_FILES }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### yamlfmt Configuration Applied" >> $GITHUB_STEP_SUMMARY
          echo "- **Indent Style**: Spaces (2 spaces)" >> $GITHUB_STEP_SUMMARY
          echo "- **Line Endings**: LF" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Newline**: Required" >> $GITHUB_STEP_SUMMARY
          echo "- **Line Breaks**: Preserved where sensible" >> $GITHUB_STEP_SUMMARY
          echo "- **Comment Padding**: 1 space after #" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **All YAML/JSON files meet formatting standards via MAGE-X.**" >> $GITHUB_STEP_SUMMARY
